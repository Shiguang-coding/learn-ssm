<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shiguang.mapper.EmployeeMapper">


    <!-- 动态标签: 如果传入属性,就判断是否满足条件,若不传入则不加相应条件

         if: 判断传入的参数是否满足条件,最终是否添加语句
             test: 判断条件,为true时将标签内的sql进行拼接
                   判断语句:  "key 比较符号 值 and | or key 比较符号 值"
                   大于和小于符号不推荐写符号,推荐使用实体符号  > &gt;  <  &lt;
         问题:
             假设两个都满足 where emp_name = #{name} and emp_salary = #{salary}
             假设第一个满足 where emp_name = #{name}
             假设第一个不满足,第二个满足 where and emp_salary = #{salary}  错误
             假设都不满足 where  错误

        where :
               1. 自动添加where关键字, where内部有任何一个if满足时,自动添加where关键字,不满足去掉where
               2. 自动去掉多余的 and 和 or 关键字
    -->


    <!--    List<Employee> query(@Param("name") String name,@Param("salary") Double salary);-->
    <select id="query" resultType="employee">
        select * from t_emp
        <where>
            <if test="name != null and name != ''">
                emp_name = #{name}
            </if>

            <if test="salary != null and salary &gt; 100">
                and emp_salary = #{salary}
            </if>
        </where>
    </select>


    <!--
        第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?
        第二种情况：部分条件满足 SET emp_name=?,  错误
        第三种情况：所有条件都不满足 update t_emp where emp_id=? 错误

        set:
            1. 自动添加set关键字
            2. 自动去除多余逗号
    -->


<!--    int update(Employee employee);-->

    <update id="update">
        update t_emp
        <set>
            <if test="empName != null">
                emp_name = #{empName},
            </if>
            <if test="empSalary != null">
                emp_salary = #{empSalary}
            </if>
        </set>
        where emp_id = #{empId}
    </update>



<!--    List<Employee> queryTrim(@Param("name") String name,@Param("salary") Double salary);-->
    <select id="queryTrim" resultType="employee">
        select * from t_emp
        <trim prefix="where" prefixOverrides="and">
            <if test="name != null and name != ''">
              and  emp_name = #{name}
            </if>

            <if test="salary != null and salary &gt; 100">
              and  emp_salary = #{salary}
            </if>
        </trim>
    </select>



<!--    int updateTrim(Employee employee);-->

    <update id="updateTrim">
        update t_emp
        <trim prefix="set" suffixOverrides=",">
            <if test="empName != null">
                emp_name = #{empName},
            </if>
            <if test="empSalary != null">
                emp_salary = #{empSalary}
            </if>
        </trim>
        where emp_id = #{empId}
    </update>


<!--    List<Employee> queryChoose(@Param("name") String name,@Param("salary") Double salary);-->
    <select id="queryChoose" resultType="employee">
        select * from t_emp where
        <choose>
            <when test="name != null">
                  emp_name = #{name}
            </when>
            <when test="salary != null">
                  emp_salary = #{salary}
            </when>
            <otherwise>1=1</otherwise>
        </choose>

    </select>


        <!-- foreach
             collection: @Param("") 属性名 | arg0 | list
             open: 遍历开始前追加的字符串
             close: 遍历结束后追加的字符串
             separator: 各个子项之间分隔符,最后一个子项不追加
             item: 获取每个遍历项

             若一个标签涉及多个语句,需要设置允许指定多语句
             <property name="url" value="jdbc:mysql://localhost:3306/mybatis-example?allowMultiQueries=true"/>
        -->

<!--    List<Employee> queryBatch(@Param("ids") List<Integer> ids);-->
    <select id="queryBatch" resultType="employee">
        select * from t_emp where emp_id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>



<!--    int deleteBatch(@Param("ids") List<Integer> ids);-->
    <delete id="deleteBatch">
        delete from t_emp where emp_id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>
    

<!--    int insertBatch(@Param("employees") List<Employee> employees);-->
    <!--insert into t_emp(emp_name,emp_salary) values ("",xxx),("",xxx),("",xx)-->
    <insert id="insertBatch" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="empId">
        insert into t_emp(emp_name,emp_salary) values
        <foreach collection="employees" item="employee" separator=",">
            (#{employee.empName},#{employee.empSalary} )
        </foreach>
    </insert>



<!--    int updateBatch(@Param("employees") List<Employee> employees);-->
    <update id="updateBatch">
        <foreach collection="employees" item="employee">
            update t_emp set emp_name = #{employee.empName} , emp_salary = #{employee.empSalary} where emp_id =
            #{employee.empId};
        </foreach>

    </update>

</mapper>
